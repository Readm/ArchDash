name: 🏷️ Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.2.0)'
        required: true
        type: string
      release_type:
        description: '发布类型'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write

jobs:
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.x"
    
    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build bump2version
    
    - name: 🔧 Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: 📝 Update version number
      run: |
        # 更新版本号在多个文件中
        sed -i "s/version=\"[^\"]*\"/version=\"${{ github.event.inputs.version }}\"/g" setup.py
        sed -i "s/__version__ = \"[^\"]*\"/__version__ = \"${{ github.event.inputs.version }}\"/g" archdash/__init__.py
        sed -i "s/version = \"[^\"]*\"/version = \"${{ github.event.inputs.version }}\"/g" pyproject.toml
    
    - name: 📦 Build package
      run: python -m build
    
    - name: 🔍 Check package integrity
      run: |
        python -m pip install twine
        python -m twine check dist/*
    
    - name: 📝 Commit version bump
      run: |
        git add .
        git commit -m "🔖 Bump version to ${{ github.event.inputs.version }}"
        git push
    
    - name: 🏷️ Create and push tag
      run: |
        git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
        git push origin "v${{ github.event.inputs.version }}"
    
    - name: 📋 Generate changelog
      id: changelog
      run: |
        # 获取上一个标签
        PREV_TAG=$(git tag --sort=-version:refname | head -n 2 | tail -n 1)
        if [ -z "$PREV_TAG" ]; then
          PREV_TAG=$(git rev-list --max-parents=0 HEAD)
        fi
        
        # 生成更新日志
        echo "## 🚀 更新内容" > changelog.md
        echo "" >> changelog.md
        git log --pretty=format:"- %s" "$PREV_TAG"..HEAD >> changelog.md
        echo "" >> changelog.md
        echo "" >> changelog.md
        echo "## 📦 安装" >> changelog.md
        echo "" >> changelog.md
        echo "\`\`\`bash" >> changelog.md
        echo "pip install archdash==${{ github.event.inputs.version }}" >> changelog.md
        echo "\`\`\`" >> changelog.md
        
        # 输出到 GitHub Actions
        {
          echo 'CHANGELOG<<EOF'
          cat changelog.md
          echo EOF
        } >> $GITHUB_OUTPUT
    
    - name: 🎉 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: 🎨 ArchDash v${{ github.event.inputs.version }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false
    
    - name: 📤 Upload wheel to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/archdash-${{ github.event.inputs.version }}-py3-none-any.whl
        asset_name: archdash-${{ github.event.inputs.version }}-py3-none-any.whl
        asset_content_type: application/zip
    
    - name: 📤 Upload tarball to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/archdash-${{ github.event.inputs.version }}.tar.gz
        asset_name: archdash-${{ github.event.inputs.version }}.tar.gz
        asset_content_type: application/gzip